{"version":3,"sources":["components/Statistics/Statistics.js","components/Feedback/Feedback.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","components/Feedback/feedback.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Feedback","options","onLeaveFeedback","map","option","type","className","styles","Feedback_button","name","onClick","shortid","generate","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","prevGood","prevNeutral","prevBad","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+OAsBeA,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAChD,OACC,qCACC,sCAASJ,KACT,yCAAYC,KACZ,qCAAQC,KACR,uCAAUC,KACV,mDAAsBC,EAAtB,Y,gCCYYC,EAhBE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC5B,OACC,mCACED,EAAQE,KAAI,SAACC,GAAD,OACZ,wBAAiCC,KAAK,SAASC,UAAWC,IAAOC,gBAAiBC,KAAML,EAAQM,QAASR,EAAzG,SACEE,GADWO,IAAQC,kBCMVC,EAZC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACzB,OACC,qCACC,6BAAKD,IACJC,MCMWC,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OACC,mCACC,4BAAIA,OCAQ,SAASC,IACvB,MAAwBC,mBAAS,GAAjC,mBAAOxB,EAAP,KAAayB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOvB,EAAP,KAAgByB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOtB,EAAP,KAAYyB,EAAZ,KAmBMC,EAAqB,kBAAM5B,EAAOC,EAAUC,GAKlD,OACE,gCACD,cAAC,EAAD,CAASiB,MAAM,wBAAf,SACE,cAAC,EAAD,CACDb,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA3BsB,SAAAsB,GAEtB,OADaA,EAAEC,OAAOhB,MAEvB,IAAK,OACHW,GAAQ,SAAAM,GAAQ,OAAIA,EAAW,KAC/B,MACF,IAAK,UACHL,GAAW,SAAAM,GAAW,OAAIA,EAAc,KACxC,MACF,IAAK,MACHL,GAAO,SAAAM,GAAO,OAAIA,EAAU,KAC5B,MACF,QACE,aAkBwB,IAAzBL,IACC,cAAC,EAAD,CAAcN,QAAQ,sBAEvB,cAAC,EAAD,CAASH,MAAM,aAAf,SACC,cAAC,EAAD,CACCnB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOyB,IACPxB,mBApBF8B,KAAKC,MAAO,IAAMnC,EAAQ4B,YC/B7B,IAYeQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxB,EAAD,MAEFyB,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,gBAAkB,qC","file":"static/js/main.d1d9a490.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>Good:{good}</p>\r\n\t\t\t<p>Neutral:{neutral}</p>\r\n\t\t\t<p>Bad:{bad}</p>\r\n\t\t\t<p>Total:{total}</p>\r\n\t\t\t<p>Positive feedback:{positivePercentage} %</p>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nStatistics.propTypes = {\r\n\tgood: PropTypes.number.isRequired,\r\n\tneutral: PropTypes.number.isRequired,\r\n\tbad: PropTypes.number.isRequired,\r\n\ttotal: PropTypes.number.isRequired,\r\n\tpositivePercentage: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './feedback.module.css';\r\n\r\nconst Feedback = ({ options, onLeaveFeedback }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{options.map((option) => (\r\n\t\t\t\t<button key={shortid.generate()} type=\"button\" className={styles.Feedback_button} name={option} onClick={onLeaveFeedback} >\r\n\t\t\t\t\t{option}\r\n\t\t\t\t</button>\r\n\t\t\t))}\r\n\t\t</>\r\n\t);\r\n};\r\nFeedback.propTypes = {\r\n\toptions: PropTypes.array.isRequired,\r\n\tonLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Feedback;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>{title}</h2>\r\n\t\t\t{children}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nSection.propTypes = {\r\n\ttitle: PropTypes.string.isRequired\r\n};\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>{message}</p>\r\n\t\t</>\r\n\t);\r\n};\r\nNotification.propTypes = {\r\n\tmessage: PropTypes.string.isRequired\r\n};\r\nexport default Notification;","import { useState } from 'react';\nimport Statistics from './components/Statistics/Statistics';\nimport Feedback from './components/Feedback/Feedback';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nexport default function App() {\n\tconst [good, setGood] = useState(0);\n\tconst [neutral, setNeutral] = useState(0);\n\tconst [bad, setBad] = useState(0);\n  \n\tconst onLeaveFeedback = e => {\n\t  const name = e.target.name;\n\t  switch (name) {\n\t\tcase 'good':\n\t\t  setGood(prevGood => prevGood + 1);\n\t\t  break;\n\t\tcase 'neutral':\n\t\t  setNeutral(prevNeutral => prevNeutral + 1);\n\t\t  break;\n\t\tcase 'bad':\n\t\t  setBad(prevBad => prevBad + 1);\n\t\t  break;\n\t\tdefault:\n\t\t  return;\n\t  }\n\t};\n  \n\tconst countTotalFeedback = () => good + neutral + bad;\n  \n\tconst countPositiveFeedbackPercentage = () =>\n\t  Math.round((100 * good) / countTotalFeedback());\n  \n\treturn (\n\t  <div>\n\t\t<Section title=\"Please leave feedback\">\n\t\t  <Feedback\n\t\t\toptions={['good', 'neutral', 'bad']}\n\t\t\tonLeaveFeedback={onLeaveFeedback}\n\t\t  />\n\t\t</Section>\n\t\t\n\t\t{countTotalFeedback() === 0 ? (\n\t\t\t\t<Notification message=\"No feedback given\" />\n\t\t) : (\n\t\t\t<Section title=\"Statistics\">\n\t\t\t\t<Statistics\n\t\t\t\t\tgood={good}\n\t\t\t\t\tneutral={neutral}\n\t\t\t\t\tbad={bad}\n\t\t\t\t\ttotal={countTotalFeedback()}\n\t\t\t\t\tpositivePercentage={countPositiveFeedbackPercentage()}\n\t\t\t\t/>\n\t\t\t</Section>\n\t\t)}\n\n\t  </div>\n\t);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Feedback_button\":\"feedback_Feedback_button__2UgdR\"};"],"sourceRoot":""}